# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule PeerTube.Api.MyUser do
  @moduledoc """
  API calls for all endpoints tagged `MyUser`.
  """

  alias PeerTube.Connection
  import PeerTube.RequestBuilder


  @doc """
  List my abuses

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :id (integer()): only list the report with this id
    - :state (PeerTube.Model.AbuseStateSet.t): 
    - :start (integer()): Offset used to paginate results
    - :count (integer()): Number of items to return
    - :sort (String.t): Sort abuses by criteria
  ## Returns

  {:ok, [%Abuse{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec users_me_abuses_get(Tesla.Env.client, keyword()) :: {:ok, list(PeerTube.Model.Abuse.t)} | {:error, Tesla.Env.t}
  def users_me_abuses_get(connection, opts \\ []) do
    optional_params = %{
      :"id" => :query,
      :"state" => :query,
      :"start" => :query,
      :"count" => :query,
      :"sort" => :query
    }
    %{}
    |> method(:get)
    |> url("/users/me/abuses")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, [%PeerTube.Model.Abuse{}]}
    ])
  end

  @doc """
  Delete my avatar

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec users_me_avatar_delete(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def users_me_avatar_delete(connection, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/users/me/avatar")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false}
    ])
  end

  @doc """
  Update my user avatar

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :avatarfile (String.t): The file to upload.
  ## Returns

  {:ok, PeerTube.Model.InlineResponse2001.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec users_me_avatar_pick_post(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, PeerTube.Model.InlineResponse2001.t} | {:error, Tesla.Env.t}
  def users_me_avatar_pick_post(connection, opts \\ []) do
    optional_params = %{
      :"avatarfile" => :form
    }
    %{}
    |> method(:post)
    |> url("/users/me/avatar/pick")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PeerTube.Model.InlineResponse2001{}},
      { 413, false}
    ])
  end

  @doc """
  Get my user information

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%User{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec users_me_get(Tesla.Env.client, keyword()) :: {:ok, list(PeerTube.Model.User.t)} | {:error, Tesla.Env.t}
  def users_me_get(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/users/me")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, [%PeerTube.Model.User{}]}
    ])
  end

  @doc """
  Update my user information

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - update_me (UpdateMe): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec users_me_put(Tesla.Env.client, PeerTube.Model.UpdateMe.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def users_me_put(connection, update_me, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/users/me")
    |> add_param(:body, :body, update_me)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false}
    ])
  end

  @doc """
  Get my user used quota

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, float()} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec users_me_video_quota_used_get(Tesla.Env.client, keyword()) :: {:ok, Float.t} | {:error, Tesla.Env.t}
  def users_me_video_quota_used_get(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/users/me/video-quota-used")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false}
    ])
  end

  @doc """
  Get videos of my user

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :start (integer()): Offset used to paginate results
    - :count (integer()): Number of items to return
    - :sort (String.t): Sort column
  ## Returns

  {:ok, PeerTube.Model.VideoListResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec users_me_videos_get(Tesla.Env.client, keyword()) :: {:ok, PeerTube.Model.VideoListResponse.t} | {:error, Tesla.Env.t}
  def users_me_videos_get(connection, opts \\ []) do
    optional_params = %{
      :"start" => :query,
      :"count" => :query,
      :"sort" => :query
    }
    %{}
    |> method(:get)
    |> url("/users/me/videos")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PeerTube.Model.VideoListResponse{}}
    ])
  end

  @doc """
  Get video imports of my user

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :start (integer()): Offset used to paginate results
    - :count (integer()): Number of items to return
    - :sort (String.t): Sort column
  ## Returns

  {:ok, PeerTube.Model.VideoImport.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec users_me_videos_imports_get(Tesla.Env.client, keyword()) :: {:ok, PeerTube.Model.VideoImport.t} | {:error, Tesla.Env.t}
  def users_me_videos_imports_get(connection, opts \\ []) do
    optional_params = %{
      :"start" => :query,
      :"count" => :query,
      :"sort" => :query
    }
    %{}
    |> method(:get)
    |> url("/users/me/videos/imports")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PeerTube.Model.VideoImport{}}
    ])
  end

  @doc """
  Get rate of my user for a video

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - video_id (String.t): The video id 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, PeerTube.Model.GetMeVideoRating.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec users_me_videos_video_id_rating_get(Tesla.Env.client, String.t, keyword()) :: {:ok, PeerTube.Model.GetMeVideoRating.t} | {:error, Tesla.Env.t}
  def users_me_videos_video_id_rating_get(connection, video_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/users/me/videos/#{video_id}/rating")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PeerTube.Model.GetMeVideoRating{}}
    ])
  end
end
