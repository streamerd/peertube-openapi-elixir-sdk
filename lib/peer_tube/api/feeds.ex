# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule PeerTube.Api.Feeds do
  @moduledoc """
  API calls for all endpoints tagged `Feeds`.
  """

  alias PeerTube.Connection
  import PeerTube.RequestBuilder


  @doc """
  List comments on videos

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - format (String.t): format expected (we focus on making `rss` the most featureful ; it serves [Media RSS](https://www.rssboard.org/media-rss))
  - opts (KeywordList): [optional] Optional parameters
    - :video_id (String.t): limit listing to a specific video
    - :account_id (String.t): limit listing to a specific account
    - :account_name (String.t): limit listing to a specific account
    - :video_channel_id (String.t): limit listing to a specific video channel
    - :video_channel_name (String.t): limit listing to a specific video channel
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec feeds_video_comments_format_get(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def feeds_video_comments_format_get(connection, format, opts \\ []) do
    optional_params = %{
      :"videoId" => :query,
      :"accountId" => :query,
      :"accountName" => :query,
      :"videoChannelId" => :query,
      :"videoChannelName" => :query
    }
    %{}
    |> method(:get)
    |> url("/feeds/video-comments.#{format}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, []},
      { 400, false},
      { 404, false},
      { 406, false}
    ])
  end

  @doc """
  List videos

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - format (String.t): format expected (we focus on making `rss` the most featureful ; it serves [Media RSS](https://www.rssboard.org/media-rss))
  - opts (KeywordList): [optional] Optional parameters
    - :account_id (String.t): limit listing to a specific account
    - :account_name (String.t): limit listing to a specific account
    - :video_channel_id (String.t): limit listing to a specific video channel
    - :video_channel_name (String.t): limit listing to a specific video channel
    - :sort (String.t): Sort column
    - :nsfw (String.t): whether to include nsfw videos, if any
    - :filter (String.t): Special filters which might require special rights:  * `local` - only videos local to the instance  * `all-local` - only videos local to the instance, but showing private and unlisted videos (requires Admin privileges)  * `all` - all videos, showing private and unlisted videos (requires Admin privileges) 
  ## Returns

  {:ok, [%Map{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec feeds_videos_format_get(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, list(Map.t)} | {:error, Tesla.Env.t}
  def feeds_videos_format_get(connection, format, opts \\ []) do
    optional_params = %{
      :"accountId" => :query,
      :"accountName" => :query,
      :"videoChannelId" => :query,
      :"videoChannelName" => :query,
      :"sort" => :query,
      :"nsfw" => :query,
      :"filter" => :query
    }
    %{}
    |> method(:get)
    |> url("/feeds/videos.#{format}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, []},
      { 404, false},
      { 406, false}
    ])
  end
end
