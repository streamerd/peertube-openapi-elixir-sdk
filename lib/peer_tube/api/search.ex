# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule PeerTube.Api.Search do
  @moduledoc """
  API calls for all endpoints tagged `Search`.
  """

  alias PeerTube.Connection
  import PeerTube.RequestBuilder


  @doc """
  Search channels

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - search (String.t): String to search. If the user can make a remote URI search, and the string is an URI then the PeerTube instance will fetch the remote object and add it to its database. Then, you can use the REST API to fetch the complete channel information and interact with it. 
  - opts (KeywordList): [optional] Optional parameters
    - :start (integer()): Offset used to paginate results
    - :count (integer()): Number of items to return
    - :search_target (String.t): If the administrator enabled search index support, you can override the default search target.  **Warning**: If you choose to make an index search, PeerTube will get results from a third party service. It means the instance may not yet know the objects you fetched. If you want to load video/channel information:   * If the current user has the ability to make a remote URI search (this information is available in the config endpoint),   then reuse the search API to make a search using the object URI so PeerTube instance fetches the remote object and fill its database.   After that, you can use the classic REST API endpoints to fetch the complete object or interact with it   * If the current user doesn't have the ability to make a remote URI search, then redirect the user on the origin instance or fetch   the data from the origin instance API 
    - :sort (String.t): Sort column
  ## Returns

  {:ok, [%VideoChannel{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec search_video_channels_get(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, list(PeerTube.Model.VideoChannel.t)} | {:error, Tesla.Env.t}
  def search_video_channels_get(connection, search, opts \\ []) do
    optional_params = %{
      :"start" => :query,
      :"count" => :query,
      :"searchTarget" => :query,
      :"sort" => :query
    }
    %{}
    |> method(:get)
    |> url("/search/video-channels")
    |> add_param(:query, :"search", search)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, [%PeerTube.Model.VideoChannel{}]},
      { 500, false}
    ])
  end

  @doc """
  Search videos

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - search (String.t): String to search. If the user can make a remote URI search, and the string is an URI then the PeerTube instance will fetch the remote object and add it to its database. Then, you can use the REST API to fetch the complete video information and interact with it. 
  - opts (KeywordList): [optional] Optional parameters
    - :category_one_of (OneOfintegerarray): category id of the video (see [/videos/categories](#tag/Video/paths/~1videos~1categories/get))
    - :tags_one_of (OneOfstringarray): tag(s) of the video
    - :tags_all_of (OneOfstringarray): tag(s) of the video, where all should be present in the video
    - :licence_one_of (OneOfintegerarray): licence id of the video (see [/videos/licences](#tag/Video/paths/~1videos~1licences/get))
    - :language_one_of (OneOfstringarray): language id of the video (see [/videos/languages](#tag/Video/paths/~1videos~1languages/get)). Use `_unknown` to filter on videos that don't have a video language
    - :nsfw (String.t): whether to include nsfw videos, if any
    - :filter (String.t): Special filters which might require special rights:  * `local` - only videos local to the instance  * `all-local` - only videos local to the instance, but showing private and unlisted videos (requires Admin privileges)  * `all` - all videos, showing private and unlisted videos (requires Admin privileges) 
    - :skip_count (String.t): if you don't need the `total` in the response
    - :start (integer()): Offset used to paginate results
    - :count (integer()): Number of items to return
    - :search_target (String.t): If the administrator enabled search index support, you can override the default search target.  **Warning**: If you choose to make an index search, PeerTube will get results from a third party service. It means the instance may not yet know the objects you fetched. If you want to load video/channel information:   * If the current user has the ability to make a remote URI search (this information is available in the config endpoint),   then reuse the search API to make a search using the object URI so PeerTube instance fetches the remote object and fill its database.   After that, you can use the classic REST API endpoints to fetch the complete object or interact with it   * If the current user doesn't have the ability to make a remote URI search, then redirect the user on the origin instance or fetch   the data from the origin instance API 
    - :sort (String.t): Sort videos by criteria
    - :start_date (DateTime.t): Get videos that are published after this date
    - :end_date (DateTime.t): Get videos that are published before this date
    - :originally_published_start_date (DateTime.t): Get videos that are originally published after this date
    - :originally_published_end_date (DateTime.t): Get videos that are originally published before this date
    - :duration_min (integer()): Get videos that have this minimum duration
    - :duration_max (integer()): Get videos that have this maximum duration
  ## Returns

  {:ok, PeerTube.Model.VideoListResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec search_videos_get(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, PeerTube.Model.VideoListResponse.t} | {:error, Tesla.Env.t}
  def search_videos_get(connection, search, opts \\ []) do
    optional_params = %{
      :"categoryOneOf" => :query,
      :"tagsOneOf" => :query,
      :"tagsAllOf" => :query,
      :"licenceOneOf" => :query,
      :"languageOneOf" => :query,
      :"nsfw" => :query,
      :"filter" => :query,
      :"skipCount" => :query,
      :"start" => :query,
      :"count" => :query,
      :"searchTarget" => :query,
      :"sort" => :query,
      :"startDate" => :query,
      :"endDate" => :query,
      :"originallyPublishedStartDate" => :query,
      :"originallyPublishedEndDate" => :query,
      :"durationMin" => :query,
      :"durationMax" => :query
    }
    %{}
    |> method(:get)
    |> url("/search/videos")
    |> add_param(:query, :"search", search)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PeerTube.Model.VideoListResponse{}},
      { 500, false}
    ])
  end
end
