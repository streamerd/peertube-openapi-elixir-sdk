# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule PeerTube.Api.VideoComments do
  @moduledoc """
  API calls for all endpoints tagged `VideoComments`.
  """

  alias PeerTube.Connection
  import PeerTube.RequestBuilder


  @doc """
  List threads of a video

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - id (OneOfintegerUuid): The object id or uuid
  - opts (KeywordList): [optional] Optional parameters
    - :start (integer()): Offset used to paginate results
    - :count (integer()): Number of items to return
    - :sort (String.t): Sort comments by criteria
  ## Returns

  {:ok, PeerTube.Model.CommentThreadResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec videos_id_comment_threads_get(Tesla.Env.client, PeerTube.Model.OneOfintegerUuid.t, keyword()) :: {:ok, PeerTube.Model.CommentThreadResponse.t} | {:error, Tesla.Env.t}
  def videos_id_comment_threads_get(connection, id, opts \\ []) do
    optional_params = %{
      :"start" => :query,
      :"count" => :query,
      :"sort" => :query
    }
    %{}
    |> method(:get)
    |> url("/videos/#{id}/comment-threads")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PeerTube.Model.CommentThreadResponse{}}
    ])
  end

  @doc """
  Create a thread

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - id (OneOfintegerUuid): The object id or uuid
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject22): 
  ## Returns

  {:ok, PeerTube.Model.CommentThreadPostResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec videos_id_comment_threads_post(Tesla.Env.client, PeerTube.Model.OneOfintegerUuid.t, keyword()) :: {:ok, nil} | {:ok, PeerTube.Model.CommentThreadPostResponse.t} | {:error, Tesla.Env.t}
  def videos_id_comment_threads_post(connection, id, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/videos/#{id}/comment-threads")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PeerTube.Model.CommentThreadPostResponse{}},
      { 404, false}
    ])
  end

  @doc """
  Get a thread

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - id (OneOfintegerUuid): The object id or uuid
  - thread_id (integer()): The thread id (root comment id)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, PeerTube.Model.VideoCommentThreadTree.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec videos_id_comment_threads_thread_id_get(Tesla.Env.client, PeerTube.Model.OneOfintegerUuid.t, integer(), keyword()) :: {:ok, PeerTube.Model.VideoCommentThreadTree.t} | {:error, Tesla.Env.t}
  def videos_id_comment_threads_thread_id_get(connection, id, thread_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/videos/#{id}/comment-threads/#{thread_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PeerTube.Model.VideoCommentThreadTree{}}
    ])
  end

  @doc """
  Delete a comment or a reply

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - id (OneOfintegerUuid): The object id or uuid
  - comment_id (integer()): The comment id
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec videos_id_comments_comment_id_delete(Tesla.Env.client, PeerTube.Model.OneOfintegerUuid.t, integer(), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def videos_id_comments_comment_id_delete(connection, id, comment_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/videos/#{id}/comments/#{comment_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false},
      { 403, false},
      { 404, false},
      { 409, false}
    ])
  end

  @doc """
  Reply to a thread of a video

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - id (OneOfintegerUuid): The object id or uuid
  - comment_id (integer()): The comment id
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject23): 
  ## Returns

  {:ok, PeerTube.Model.CommentThreadPostResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec videos_id_comments_comment_id_post(Tesla.Env.client, PeerTube.Model.OneOfintegerUuid.t, integer(), keyword()) :: {:ok, nil} | {:ok, PeerTube.Model.CommentThreadPostResponse.t} | {:error, Tesla.Env.t}
  def videos_id_comments_comment_id_post(connection, id, comment_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/videos/#{id}/comments/#{comment_id}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PeerTube.Model.CommentThreadPostResponse{}},
      { 404, false}
    ])
  end
end
