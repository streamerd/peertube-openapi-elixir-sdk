# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule PeerTube.Api.MyHistory do
  @moduledoc """
  API calls for all endpoints tagged `MyHistory`.
  """

  alias PeerTube.Connection
  import PeerTube.RequestBuilder


  @doc """
  List watched videos history

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :start (integer()): Offset used to paginate results
    - :count (integer()): Number of items to return
    - :search (String.t): Plain text search, applied to various parts of the model depending on endpoint
  ## Returns

  {:ok, PeerTube.Model.VideoListResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec users_me_history_videos_get(Tesla.Env.client, keyword()) :: {:ok, PeerTube.Model.VideoListResponse.t} | {:error, Tesla.Env.t}
  def users_me_history_videos_get(connection, opts \\ []) do
    optional_params = %{
      :"start" => :query,
      :"count" => :query,
      :"search" => :query
    }
    %{}
    |> method(:get)
    |> url("/users/me/history/videos")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PeerTube.Model.VideoListResponse{}}
    ])
  end

  @doc """
  Clear video history

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :before_date (DateTime.t): history before this date will be deleted
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec users_me_history_videos_remove_post(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def users_me_history_videos_remove_post(connection, opts \\ []) do
    optional_params = %{
      :"beforeDate" => :form
    }
    %{}
    |> method(:post)
    |> url("/users/me/history/videos/remove")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false}
    ])
  end
end
