# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule PeerTube.Api.Job do
  @moduledoc """
  API calls for all endpoints tagged `Job`.
  """

  alias PeerTube.Connection
  import PeerTube.RequestBuilder


  @doc """
  List instance jobs

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - state (String.t): The state of the job ('' for for no filter)
  - opts (KeywordList): [optional] Optional parameters
    - :job_type (String.t): job type
    - :start (integer()): Offset used to paginate results
    - :count (integer()): Number of items to return
    - :sort (String.t): Sort column
  ## Returns

  {:ok, PeerTube.Model.InlineResponse200.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec jobs_state_get(Tesla.Env.client, String.t, keyword()) :: {:ok, PeerTube.Model.InlineResponse200.t} | {:error, Tesla.Env.t}
  def jobs_state_get(connection, state, opts \\ []) do
    optional_params = %{
      :"jobType" => :query,
      :"start" => :query,
      :"count" => :query,
      :"sort" => :query
    }
    %{}
    |> method(:get)
    |> url("/jobs/#{state}")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PeerTube.Model.InlineResponse200{}}
    ])
  end
end
