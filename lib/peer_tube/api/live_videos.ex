# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule PeerTube.Api.LiveVideos do
  @moduledoc """
  API calls for all endpoints tagged `LiveVideos`.
  """

  alias PeerTube.Connection
  import PeerTube.RequestBuilder


  @doc """
  Get a live information

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - id (OneOfintegerUuid): The object id or uuid
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, PeerTube.Model.LiveVideoResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec videos_live_id_get(Tesla.Env.client, PeerTube.Model.OneOfintegerUuid.t, keyword()) :: {:ok, PeerTube.Model.LiveVideoResponse.t} | {:error, Tesla.Env.t}
  def videos_live_id_get(connection, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/videos/live/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PeerTube.Model.LiveVideoResponse{}}
    ])
  end

  @doc """
  Update a live information

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - id (OneOfintegerUuid): The object id or uuid
  - opts (KeywordList): [optional] Optional parameters
    - :body (LiveVideoUpdate): 
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec videos_live_id_put(Tesla.Env.client, PeerTube.Model.OneOfintegerUuid.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def videos_live_id_put(connection, id, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:put)
    |> url("/videos/live/#{id}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false},
      { 400, false},
      { 403, false}
    ])
  end

  @doc """
  Create a live

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - channel_id (integer()): Channel id that will contain this live video
  - name (String.t): Live video/replay name
  - opts (KeywordList): [optional] Optional parameters
    - :save_replay (boolean()): 
    - :permanent_live (boolean()): User can stream multiple times in a permanent live
    - :thumbnailfile (String.t): Live video/replay thumbnail file
    - :previewfile (String.t): Live video/replay preview file
    - :privacy (PeerTube.Model.VideoPrivacySet.t): 
    - :category (String.t): Live video/replay category
    - :licence (String.t): Live video/replay licence
    - :language (String.t): Live video/replay language
    - :description (String.t): Live video/replay description
    - :support (String.t): A text tell the audience how to support the creator
    - :nsfw (boolean()): Whether or not this live video/replay contains sensitive content
    - :tags ([String.t]): Live video/replay tags (maximum 5 tags each between 2 and 30 characters)
    - :comments_enabled (boolean()): Enable or disable comments for this live video/replay
    - :download_enabled (boolean()): Enable or disable downloading for the replay of this live
  ## Returns

  {:ok, PeerTube.Model.VideoUploadResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec videos_live_post(Tesla.Env.client, integer(), String.t, keyword()) :: {:ok, nil} | {:ok, PeerTube.Model.VideoUploadResponse.t} | {:error, Tesla.Env.t}
  def videos_live_post(connection, channel_id, name, opts \\ []) do
    optional_params = %{
      :"saveReplay" => :form,
      :"permanentLive" => :form,
      :"thumbnailfile" => :form,
      :"previewfile" => :form,
      :"privacy" => :form,
      :"category" => :form,
      :"licence" => :form,
      :"language" => :form,
      :"description" => :form,
      :"support" => :form,
      :"nsfw" => :form,
      :"tags" => :form,
      :"commentsEnabled" => :form,
      :"downloadEnabled" => :form
    }
    %{}
    |> method(:post)
    |> url("/videos/live")
    |> add_param(:form, :"channelId", channel_id)
    |> add_param(:form, :"name", name)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PeerTube.Model.VideoUploadResponse{}},
      { 403, false}
    ])
  end
end
