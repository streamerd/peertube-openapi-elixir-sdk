# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule PeerTube.Api.VideoBlocks do
  @moduledoc """
  API calls for all endpoints tagged `VideoBlocks`.
  """

  alias PeerTube.Connection
  import PeerTube.RequestBuilder


  @doc """
  List video blocks

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :type (integer()): list only blocks that match this type: - `1`: manual block - `2`: automatic block that needs review 
    - :search (String.t): plain search that will match with video titles, and more
    - :start (integer()): Offset used to paginate results
    - :count (integer()): Number of items to return
    - :sort (String.t): Sort blacklists by criteria
  ## Returns

  {:ok, PeerTube.Model.InlineResponse2002.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec videos_blacklist_get(Tesla.Env.client, keyword()) :: {:ok, PeerTube.Model.InlineResponse2002.t} | {:error, Tesla.Env.t}
  def videos_blacklist_get(connection, opts \\ []) do
    optional_params = %{
      :"type" => :query,
      :"search" => :query,
      :"start" => :query,
      :"count" => :query,
      :"sort" => :query
    }
    %{}
    |> method(:get)
    |> url("/videos/blacklist")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PeerTube.Model.InlineResponse2002{}}
    ])
  end

  @doc """
  Unblock a video by its id

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - id (OneOfintegerUuid): The object id or uuid
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec videos_id_blacklist_delete(Tesla.Env.client, PeerTube.Model.OneOfintegerUuid.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def videos_id_blacklist_delete(connection, id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/videos/#{id}/blacklist")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false},
      { 404, false}
    ])
  end

  @doc """
  Block a video

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - id (OneOfintegerUuid): The object id or uuid
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec videos_id_blacklist_post(Tesla.Env.client, PeerTube.Model.OneOfintegerUuid.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def videos_id_blacklist_post(connection, id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/videos/#{id}/blacklist")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false}
    ])
  end
end
