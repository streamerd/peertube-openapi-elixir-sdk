# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule PeerTube.Api.VideoChannels do
  @moduledoc """
  API calls for all endpoints tagged `VideoChannels`.
  """

  alias PeerTube.Connection
  import PeerTube.RequestBuilder


  @doc """
  List video channels of an account

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - name (String.t): The username or handle of the account
  - opts (KeywordList): [optional] Optional parameters
    - :with_stats (boolean()): include view statistics for the last 30 days (only if authentified as the account user)
    - :start (integer()): Offset used to paginate results
    - :count (integer()): Number of items to return
    - :sort (String.t): Sort column
  ## Returns

  {:ok, map()} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec accounts_name_video_channels_get(Tesla.Env.client, String.t, keyword()) :: {:ok, Map.t} | {:error, Tesla.Env.t}
  def accounts_name_video_channels_get(connection, name, opts \\ []) do
    optional_params = %{
      :"withStats" => :query,
      :"start" => :query,
      :"count" => :query,
      :"sort" => :query
    }
    %{}
    |> method(:get)
    |> url("/accounts/#{name}/video-channels")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false}
    ])
  end

  @doc """
  Delete channel avatar

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - channel_handle (String.t): The video channel handle
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec video_channels_channel_handle_avatar_delete(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def video_channels_channel_handle_avatar_delete(connection, channel_handle, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/video-channels/#{channel_handle}/avatar")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false}
    ])
  end

  @doc """
  Update channel avatar

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - channel_handle (String.t): The video channel handle
  - opts (KeywordList): [optional] Optional parameters
    - :avatarfile (String.t): The file to upload.
  ## Returns

  {:ok, PeerTube.Model.InlineResponse2001.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec video_channels_channel_handle_avatar_pick_post(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, PeerTube.Model.InlineResponse2001.t} | {:error, Tesla.Env.t}
  def video_channels_channel_handle_avatar_pick_post(connection, channel_handle, opts \\ []) do
    optional_params = %{
      :"avatarfile" => :form
    }
    %{}
    |> method(:post)
    |> url("/video-channels/#{channel_handle}/avatar/pick")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PeerTube.Model.InlineResponse2001{}},
      { 413, false}
    ])
  end

  @doc """
  Delete channel banner

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - channel_handle (String.t): The video channel handle
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec video_channels_channel_handle_banner_delete(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def video_channels_channel_handle_banner_delete(connection, channel_handle, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/video-channels/#{channel_handle}/banner")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false}
    ])
  end

  @doc """
  Update channel banner

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - channel_handle (String.t): The video channel handle
  - opts (KeywordList): [optional] Optional parameters
    - :bannerfile (String.t): The file to upload.
  ## Returns

  {:ok, PeerTube.Model.InlineResponse2005.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec video_channels_channel_handle_banner_pick_post(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, PeerTube.Model.InlineResponse2005.t} | {:error, Tesla.Env.t}
  def video_channels_channel_handle_banner_pick_post(connection, channel_handle, opts \\ []) do
    optional_params = %{
      :"bannerfile" => :form
    }
    %{}
    |> method(:post)
    |> url("/video-channels/#{channel_handle}/banner/pick")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PeerTube.Model.InlineResponse2005{}},
      { 413, false}
    ])
  end

  @doc """
  Delete a video channel

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - channel_handle (String.t): The video channel handle
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec video_channels_channel_handle_delete(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def video_channels_channel_handle_delete(connection, channel_handle, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/video-channels/#{channel_handle}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false}
    ])
  end

  @doc """
  Get a video channel

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - channel_handle (String.t): The video channel handle
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, PeerTube.Model.VideoChannel.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec video_channels_channel_handle_get(Tesla.Env.client, String.t, keyword()) :: {:ok, PeerTube.Model.VideoChannel.t} | {:error, Tesla.Env.t}
  def video_channels_channel_handle_get(connection, channel_handle, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/video-channels/#{channel_handle}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PeerTube.Model.VideoChannel{}}
    ])
  end

  @doc """
  Update a video channel

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - channel_handle (String.t): The video channel handle
  - opts (KeywordList): [optional] Optional parameters
    - :body (VideoChannelUpdate): 
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec video_channels_channel_handle_put(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def video_channels_channel_handle_put(connection, channel_handle, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:put)
    |> url("/video-channels/#{channel_handle}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false}
    ])
  end

  @doc """
  List videos of a video channel

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - channel_handle (String.t): The video channel handle
  - opts (KeywordList): [optional] Optional parameters
    - :category_one_of (OneOfintegerarray): category id of the video (see [/videos/categories](#tag/Video/paths/~1videos~1categories/get))
    - :tags_one_of (OneOfstringarray): tag(s) of the video
    - :tags_all_of (OneOfstringarray): tag(s) of the video, where all should be present in the video
    - :licence_one_of (OneOfintegerarray): licence id of the video (see [/videos/licences](#tag/Video/paths/~1videos~1licences/get))
    - :language_one_of (OneOfstringarray): language id of the video (see [/videos/languages](#tag/Video/paths/~1videos~1languages/get)). Use `_unknown` to filter on videos that don't have a video language
    - :nsfw (String.t): whether to include nsfw videos, if any
    - :filter (String.t): Special filters which might require special rights:  * `local` - only videos local to the instance  * `all-local` - only videos local to the instance, but showing private and unlisted videos (requires Admin privileges)  * `all` - all videos, showing private and unlisted videos (requires Admin privileges) 
    - :skip_count (String.t): if you don't need the `total` in the response
    - :start (integer()): Offset used to paginate results
    - :count (integer()): Number of items to return
    - :sort (String.t): Sort videos by criteria
  ## Returns

  {:ok, PeerTube.Model.VideoListResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec video_channels_channel_handle_videos_get(Tesla.Env.client, String.t, keyword()) :: {:ok, PeerTube.Model.VideoListResponse.t} | {:error, Tesla.Env.t}
  def video_channels_channel_handle_videos_get(connection, channel_handle, opts \\ []) do
    optional_params = %{
      :"categoryOneOf" => :query,
      :"tagsOneOf" => :query,
      :"tagsAllOf" => :query,
      :"licenceOneOf" => :query,
      :"languageOneOf" => :query,
      :"nsfw" => :query,
      :"filter" => :query,
      :"skipCount" => :query,
      :"start" => :query,
      :"count" => :query,
      :"sort" => :query
    }
    %{}
    |> method(:get)
    |> url("/video-channels/#{channel_handle}/videos")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PeerTube.Model.VideoListResponse{}}
    ])
  end

  @doc """
  List video channels

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :start (integer()): Offset used to paginate results
    - :count (integer()): Number of items to return
    - :sort (String.t): Sort column
  ## Returns

  {:ok, PeerTube.Model.InlineResponse2004.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec video_channels_get(Tesla.Env.client, keyword()) :: {:ok, PeerTube.Model.InlineResponse2004.t} | {:error, Tesla.Env.t}
  def video_channels_get(connection, opts \\ []) do
    optional_params = %{
      :"start" => :query,
      :"count" => :query,
      :"sort" => :query
    }
    %{}
    |> method(:get)
    |> url("/video-channels")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PeerTube.Model.InlineResponse2004{}}
    ])
  end

  @doc """
  Create a video channel

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (VideoChannelCreate): 
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec video_channels_post(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def video_channels_post(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/video-channels")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false}
    ])
  end
end
