# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule PeerTube.Api.Plugins do
  @moduledoc """
  API calls for all endpoints tagged `Plugins`.
  """

  alias PeerTube.Connection
  import PeerTube.RequestBuilder


  @doc """
  List available plugins

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :search (String.t): 
    - :plugin_type (integer()): 
    - :current_peer_tube_engine (String.t): 
    - :start (integer()): Offset used to paginate results
    - :count (integer()): Number of items to return
    - :sort (String.t): Sort column
  ## Returns

  {:ok, PeerTube.Model.PluginResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec plugins_available_get(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, PeerTube.Model.PluginResponse.t} | {:error, Tesla.Env.t}
  def plugins_available_get(connection, opts \\ []) do
    optional_params = %{
      :"search" => :query,
      :"pluginType" => :query,
      :"currentPeerTubeEngine" => :query,
      :"start" => :query,
      :"count" => :query,
      :"sort" => :query
    }
    %{}
    |> method(:get)
    |> url("/plugins/available")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PeerTube.Model.PluginResponse{}},
      { 503, false}
    ])
  end

  @doc """
  List plugins

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :plugin_type (integer()): 
    - :uninstalled (boolean()): 
    - :start (integer()): Offset used to paginate results
    - :count (integer()): Number of items to return
    - :sort (String.t): Sort column
  ## Returns

  {:ok, PeerTube.Model.PluginResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec plugins_get(Tesla.Env.client, keyword()) :: {:ok, PeerTube.Model.PluginResponse.t} | {:error, Tesla.Env.t}
  def plugins_get(connection, opts \\ []) do
    optional_params = %{
      :"pluginType" => :query,
      :"uninstalled" => :query,
      :"start" => :query,
      :"count" => :query,
      :"sort" => :query
    }
    %{}
    |> method(:get)
    |> url("/plugins")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PeerTube.Model.PluginResponse{}}
    ])
  end

  @doc """
  Install a plugin

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (UNKNOWN_BASE_TYPE): 
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec plugins_install_post(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def plugins_install_post(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/plugins/install")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false},
      { 400, false}
    ])
  end

  @doc """
  Get a plugin

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - npm_name (String.t): name of the plugin/theme on npmjs.com or in its package.json
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, PeerTube.Model.Plugin.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec plugins_npm_name_get(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, PeerTube.Model.Plugin.t} | {:error, Tesla.Env.t}
  def plugins_npm_name_get(connection, npm_name, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/plugins/#{npm_name}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PeerTube.Model.Plugin{}},
      { 404, false}
    ])
  end

  @doc """
  Get a plugin's public settings

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - npm_name (String.t): name of the plugin/theme on npmjs.com or in its package.json
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %{}} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec plugins_npm_name_public_settings_get(Tesla.Env.client, String.t, keyword()) :: {:ok, map()} | {:ok, nil} | {:error, Tesla.Env.t}
  def plugins_npm_name_public_settings_get(connection, npm_name, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/plugins/#{npm_name}/public-settings")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %{}},
      { 404, false}
    ])
  end

  @doc """
  Get a plugin's registered settings

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - npm_name (String.t): name of the plugin/theme on npmjs.com or in its package.json
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, %{}} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec plugins_npm_name_registered_settings_get(Tesla.Env.client, String.t, keyword()) :: {:ok, map()} | {:ok, nil} | {:error, Tesla.Env.t}
  def plugins_npm_name_registered_settings_get(connection, npm_name, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/plugins/#{npm_name}/registered-settings")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %{}},
      { 404, false}
    ])
  end

  @doc """
  Set a plugin's settings

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - npm_name (String.t): name of the plugin/theme on npmjs.com or in its package.json
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject29): 
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec plugins_npm_name_settings_put(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def plugins_npm_name_settings_put(connection, npm_name, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:put)
    |> url("/plugins/#{npm_name}/settings")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false},
      { 404, false}
    ])
  end

  @doc """
  Uninstall a plugin

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject28): 
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec plugins_uninstall_post(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def plugins_uninstall_post(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/plugins/uninstall")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false},
      { 404, false}
    ])
  end

  @doc """
  Update a plugin

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (UNKNOWN_BASE_TYPE): 
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec plugins_update_post(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def plugins_update_post(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/plugins/update")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false},
      { 400, false},
      { 404, false}
    ])
  end
end
