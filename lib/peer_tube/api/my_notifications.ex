# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule PeerTube.Api.MyNotifications do
  @moduledoc """
  API calls for all endpoints tagged `MyNotifications`.
  """

  alias PeerTube.Connection
  import PeerTube.RequestBuilder


  @doc """
  Update my notification settings

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject3): 
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec users_me_notification_settings_put(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def users_me_notification_settings_put(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:put)
    |> url("/users/me/notification-settings")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false}
    ])
  end

  @doc """
  List my notifications

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :unread (boolean()): only list unread notifications
    - :start (integer()): Offset used to paginate results
    - :count (integer()): Number of items to return
    - :sort (String.t): Sort column
  ## Returns

  {:ok, PeerTube.Model.NotificationListResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec users_me_notifications_get(Tesla.Env.client, keyword()) :: {:ok, PeerTube.Model.NotificationListResponse.t} | {:error, Tesla.Env.t}
  def users_me_notifications_get(connection, opts \\ []) do
    optional_params = %{
      :"unread" => :query,
      :"start" => :query,
      :"count" => :query,
      :"sort" => :query
    }
    %{}
    |> method(:get)
    |> url("/users/me/notifications")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PeerTube.Model.NotificationListResponse{}}
    ])
  end

  @doc """
  Mark all my notification as read

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec users_me_notifications_read_all_post(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def users_me_notifications_read_all_post(connection, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/users/me/notifications/read-all")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false}
    ])
  end

  @doc """
  Mark notifications as read by their id

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject2): 
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec users_me_notifications_read_post(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def users_me_notifications_read_post(connection, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/users/me/notifications/read")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false}
    ])
  end
end
