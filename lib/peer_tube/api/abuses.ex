# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule PeerTube.Api.Abuses do
  @moduledoc """
  API calls for all endpoints tagged `Abuses`.
  """

  alias PeerTube.Connection
  import PeerTube.RequestBuilder


  @doc """
  Delete an abuse

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - abuse_id (integer()): Abuse id
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec abuses_abuse_id_delete(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def abuses_abuse_id_delete(connection, abuse_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/abuses/#{abuse_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false},
      { 404, false}
    ])
  end

  @doc """
  Delete an abuse message

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - abuse_id (integer()): Abuse id
  - abuse_message_id (integer()): Abuse message id
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec abuses_abuse_id_messages_abuse_message_id_delete(Tesla.Env.client, integer(), integer(), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def abuses_abuse_id_messages_abuse_message_id_delete(connection, abuse_id, abuse_message_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/abuses/#{abuse_id}/messages/#{abuse_message_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false}
    ])
  end

  @doc """
  List messages of an abuse

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - abuse_id (integer()): Abuse id
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%AbuseMessage{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec abuses_abuse_id_messages_get(Tesla.Env.client, integer(), keyword()) :: {:ok, list(PeerTube.Model.AbuseMessage.t)} | {:error, Tesla.Env.t}
  def abuses_abuse_id_messages_get(connection, abuse_id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/abuses/#{abuse_id}/messages")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, [%PeerTube.Model.AbuseMessage{}]}
    ])
  end

  @doc """
  Add message to an abuse

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - abuse_id (integer()): Abuse id
  - inline_object13 (InlineObject13): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec abuses_abuse_id_messages_post(Tesla.Env.client, integer(), PeerTube.Model.InlineObject13.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def abuses_abuse_id_messages_post(connection, abuse_id, inline_object13, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/abuses/#{abuse_id}/messages")
    |> add_param(:body, :body, inline_object13)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false},
      { 400, false}
    ])
  end

  @doc """
  Update an abuse

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - abuse_id (integer()): Abuse id
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject12): 
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec abuses_abuse_id_put(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def abuses_abuse_id_put(connection, abuse_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:put)
    |> url("/abuses/#{abuse_id}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false},
      { 404, false}
    ])
  end

  @doc """
  List abuses

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :id (integer()): only list the report with this id
    - :predefined_reason ([String.t]): predefined reason the listed reports should contain
    - :search (String.t): plain search that will match with video titles, reporter names and more
    - :state (PeerTube.Model.AbuseStateSet.t): 
    - :search_reporter (String.t): only list reports of a specific reporter
    - :search_reportee (String.t): only list reports of a specific reportee
    - :search_video (String.t): only list reports of a specific video
    - :search_video_channel (String.t): only list reports of a specific video channel
    - :video_is (String.t): only list blacklisted or deleted videos
    - :filter (String.t): only list account, comment or video reports
    - :start (integer()): Offset used to paginate results
    - :count (integer()): Number of items to return
    - :sort (String.t): Sort abuses by criteria
  ## Returns

  {:ok, [%Abuse{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec abuses_get(Tesla.Env.client, keyword()) :: {:ok, list(PeerTube.Model.Abuse.t)} | {:error, Tesla.Env.t}
  def abuses_get(connection, opts \\ []) do
    optional_params = %{
      :"id" => :query,
      :"predefinedReason" => :query,
      :"search" => :query,
      :"state" => :query,
      :"searchReporter" => :query,
      :"searchReportee" => :query,
      :"searchVideo" => :query,
      :"searchVideoChannel" => :query,
      :"videoIs" => :query,
      :"filter" => :query,
      :"start" => :query,
      :"count" => :query,
      :"sort" => :query
    }
    %{}
    |> method(:get)
    |> url("/abuses")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, [%PeerTube.Model.Abuse{}]}
    ])
  end

  @doc """
  Report an abuse

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - inline_object11 (InlineObject11): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec abuses_post(Tesla.Env.client, PeerTube.Model.InlineObject11.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def abuses_post(connection, inline_object11, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/abuses")
    |> add_param(:body, :body, inline_object11)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false},
      { 400, false}
    ])
  end

  @doc """
  List my abuses

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :id (integer()): only list the report with this id
    - :state (PeerTube.Model.AbuseStateSet.t): 
    - :start (integer()): Offset used to paginate results
    - :count (integer()): Number of items to return
    - :sort (String.t): Sort abuses by criteria
  ## Returns

  {:ok, [%Abuse{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec users_me_abuses_get(Tesla.Env.client, keyword()) :: {:ok, list(PeerTube.Model.Abuse.t)} | {:error, Tesla.Env.t}
  def users_me_abuses_get(connection, opts \\ []) do
    optional_params = %{
      :"id" => :query,
      :"state" => :query,
      :"start" => :query,
      :"count" => :query,
      :"sort" => :query
    }
    %{}
    |> method(:get)
    |> url("/users/me/abuses")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, [%PeerTube.Model.Abuse{}]}
    ])
  end
end
