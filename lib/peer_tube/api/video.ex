# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule PeerTube.Api.Video do
  @moduledoc """
  API calls for all endpoints tagged `Video`.
  """

  alias PeerTube.Connection
  import PeerTube.RequestBuilder


  @doc """
  List videos of an account

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - name (String.t): The username or handle of the account
  - opts (KeywordList): [optional] Optional parameters
    - :category_one_of (OneOfintegerarray): category id of the video (see [/videos/categories](#tag/Video/paths/~1videos~1categories/get))
    - :tags_one_of (OneOfstringarray): tag(s) of the video
    - :tags_all_of (OneOfstringarray): tag(s) of the video, where all should be present in the video
    - :licence_one_of (OneOfintegerarray): licence id of the video (see [/videos/licences](#tag/Video/paths/~1videos~1licences/get))
    - :language_one_of (OneOfstringarray): language id of the video (see [/videos/languages](#tag/Video/paths/~1videos~1languages/get)). Use `_unknown` to filter on videos that don't have a video language
    - :nsfw (String.t): whether to include nsfw videos, if any
    - :filter (String.t): Special filters which might require special rights:  * `local` - only videos local to the instance  * `all-local` - only videos local to the instance, but showing private and unlisted videos (requires Admin privileges)  * `all` - all videos, showing private and unlisted videos (requires Admin privileges) 
    - :skip_count (String.t): if you don't need the `total` in the response
    - :start (integer()): Offset used to paginate results
    - :count (integer()): Number of items to return
    - :sort (String.t): Sort videos by criteria
  ## Returns

  {:ok, PeerTube.Model.VideoListResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec accounts_name_videos_get(Tesla.Env.client, String.t, keyword()) :: {:ok, PeerTube.Model.VideoListResponse.t} | {:error, Tesla.Env.t}
  def accounts_name_videos_get(connection, name, opts \\ []) do
    optional_params = %{
      :"categoryOneOf" => :query,
      :"tagsOneOf" => :query,
      :"tagsAllOf" => :query,
      :"licenceOneOf" => :query,
      :"languageOneOf" => :query,
      :"nsfw" => :query,
      :"filter" => :query,
      :"skipCount" => :query,
      :"start" => :query,
      :"count" => :query,
      :"sort" => :query
    }
    %{}
    |> method(:get)
    |> url("/accounts/#{name}/videos")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PeerTube.Model.VideoListResponse{}}
    ])
  end

  @doc """
  List videos of a video channel

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - channel_handle (String.t): The video channel handle
  - opts (KeywordList): [optional] Optional parameters
    - :category_one_of (OneOfintegerarray): category id of the video (see [/videos/categories](#tag/Video/paths/~1videos~1categories/get))
    - :tags_one_of (OneOfstringarray): tag(s) of the video
    - :tags_all_of (OneOfstringarray): tag(s) of the video, where all should be present in the video
    - :licence_one_of (OneOfintegerarray): licence id of the video (see [/videos/licences](#tag/Video/paths/~1videos~1licences/get))
    - :language_one_of (OneOfstringarray): language id of the video (see [/videos/languages](#tag/Video/paths/~1videos~1languages/get)). Use `_unknown` to filter on videos that don't have a video language
    - :nsfw (String.t): whether to include nsfw videos, if any
    - :filter (String.t): Special filters which might require special rights:  * `local` - only videos local to the instance  * `all-local` - only videos local to the instance, but showing private and unlisted videos (requires Admin privileges)  * `all` - all videos, showing private and unlisted videos (requires Admin privileges) 
    - :skip_count (String.t): if you don't need the `total` in the response
    - :start (integer()): Offset used to paginate results
    - :count (integer()): Number of items to return
    - :sort (String.t): Sort videos by criteria
  ## Returns

  {:ok, PeerTube.Model.VideoListResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec video_channels_channel_handle_videos_get(Tesla.Env.client, String.t, keyword()) :: {:ok, PeerTube.Model.VideoListResponse.t} | {:error, Tesla.Env.t}
  def video_channels_channel_handle_videos_get(connection, channel_handle, opts \\ []) do
    optional_params = %{
      :"categoryOneOf" => :query,
      :"tagsOneOf" => :query,
      :"tagsAllOf" => :query,
      :"licenceOneOf" => :query,
      :"languageOneOf" => :query,
      :"nsfw" => :query,
      :"filter" => :query,
      :"skipCount" => :query,
      :"start" => :query,
      :"count" => :query,
      :"sort" => :query
    }
    %{}
    |> method(:get)
    |> url("/video-channels/#{channel_handle}/videos")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PeerTube.Model.VideoListResponse{}}
    ])
  end

  @doc """
  List available video categories

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%String{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec videos_categories_get(Tesla.Env.client, keyword()) :: {:ok, list(String.t)} | {:error, Tesla.Env.t}
  def videos_categories_get(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/videos/categories")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, []}
    ])
  end

  @doc """
  List videos

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :category_one_of (OneOfintegerarray): category id of the video (see [/videos/categories](#tag/Video/paths/~1videos~1categories/get))
    - :tags_one_of (OneOfstringarray): tag(s) of the video
    - :tags_all_of (OneOfstringarray): tag(s) of the video, where all should be present in the video
    - :licence_one_of (OneOfintegerarray): licence id of the video (see [/videos/licences](#tag/Video/paths/~1videos~1licences/get))
    - :language_one_of (OneOfstringarray): language id of the video (see [/videos/languages](#tag/Video/paths/~1videos~1languages/get)). Use `_unknown` to filter on videos that don't have a video language
    - :nsfw (String.t): whether to include nsfw videos, if any
    - :filter (String.t): Special filters which might require special rights:  * `local` - only videos local to the instance  * `all-local` - only videos local to the instance, but showing private and unlisted videos (requires Admin privileges)  * `all` - all videos, showing private and unlisted videos (requires Admin privileges) 
    - :skip_count (String.t): if you don't need the `total` in the response
    - :start (integer()): Offset used to paginate results
    - :count (integer()): Number of items to return
    - :sort (String.t): Sort videos by criteria
  ## Returns

  {:ok, PeerTube.Model.VideoListResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec videos_get(Tesla.Env.client, keyword()) :: {:ok, PeerTube.Model.VideoListResponse.t} | {:error, Tesla.Env.t}
  def videos_get(connection, opts \\ []) do
    optional_params = %{
      :"categoryOneOf" => :query,
      :"tagsOneOf" => :query,
      :"tagsAllOf" => :query,
      :"licenceOneOf" => :query,
      :"languageOneOf" => :query,
      :"nsfw" => :query,
      :"filter" => :query,
      :"skipCount" => :query,
      :"start" => :query,
      :"count" => :query,
      :"sort" => :query
    }
    %{}
    |> method(:get)
    |> url("/videos")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PeerTube.Model.VideoListResponse{}}
    ])
  end

  @doc """
  Delete a video

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - id (OneOfintegerUuid): The object id or uuid
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec videos_id_delete(Tesla.Env.client, PeerTube.Model.OneOfintegerUuid.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def videos_id_delete(connection, id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/videos/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false}
    ])
  end

  @doc """
  Get complete video description

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - id (OneOfintegerUuid): The object id or uuid
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, String.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec videos_id_description_get(Tesla.Env.client, PeerTube.Model.OneOfintegerUuid.t, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def videos_id_description_get(connection, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/videos/#{id}/description")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, false}
    ])
  end

  @doc """
  Get a video

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - id (OneOfintegerUuid): The object id or uuid
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, PeerTube.Model.VideoDetails.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec videos_id_get(Tesla.Env.client, PeerTube.Model.OneOfintegerUuid.t, keyword()) :: {:ok, PeerTube.Model.VideoDetails.t} | {:error, Tesla.Env.t}
  def videos_id_get(connection, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/videos/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PeerTube.Model.VideoDetails{}}
    ])
  end

  @doc """
  Update a video

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - id (OneOfintegerUuid): The object id or uuid
  - opts (KeywordList): [optional] Optional parameters
    - :thumbnailfile (String.t): Video thumbnail file
    - :previewfile (String.t): Video preview file
    - :category (integer()): Video category
    - :licence (integer()): Video licence
    - :language (String.t): Video language
    - :privacy (PeerTube.Model.VideoPrivacySet.t): 
    - :description (String.t): Video description
    - :wait_transcoding (String.t): Whether or not we wait transcoding before publish the video
    - :support (String.t): A text tell the audience how to support the video creator
    - :nsfw (boolean()): Whether or not this video contains sensitive content
    - :name (String.t): Video name
    - :tags ([String.t]): Video tags (maximum 5 tags each between 2 and 30 characters)
    - :comments_enabled (boolean()): Enable or disable comments for this video
    - :originally_published_at (DateTime.t): Date when the content was originally published
    - :schedule_update (PeerTube.Model.VideoScheduledUpdate.t): 
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec videos_id_put(Tesla.Env.client, PeerTube.Model.OneOfintegerUuid.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def videos_id_put(connection, id, opts \\ []) do
    optional_params = %{
      :"thumbnailfile" => :form,
      :"previewfile" => :form,
      :"category" => :form,
      :"licence" => :form,
      :"language" => :form,
      :"privacy" => :form,
      :"description" => :form,
      :"waitTranscoding" => :form,
      :"support" => :form,
      :"nsfw" => :form,
      :"name" => :form,
      :"tags" => :form,
      :"commentsEnabled" => :form,
      :"originallyPublishedAt" => :form,
      :"scheduleUpdate" => :form
    }
    %{}
    |> method(:put)
    |> url("/videos/#{id}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false}
    ])
  end

  @doc """
  Add a view to a video

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - id (OneOfintegerUuid): The object id or uuid
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec videos_id_views_post(Tesla.Env.client, PeerTube.Model.OneOfintegerUuid.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def videos_id_views_post(connection, id, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/videos/#{id}/views")
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false}
    ])
  end

  @doc """
  Set watching progress of a video

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - id (OneOfintegerUuid): The object id or uuid
  - user_watching_video (UserWatchingVideo): 
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec videos_id_watching_put(Tesla.Env.client, PeerTube.Model.OneOfintegerUuid.t, PeerTube.Model.UserWatchingVideo.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def videos_id_watching_put(connection, id, user_watching_video, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/videos/#{id}/watching")
    |> add_param(:body, :body, user_watching_video)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false}
    ])
  end

  @doc """
  Import a video
  Import a torrent or magnetURI or HTTP resource (if enabled by the instance administrator)

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - channel_id (integer()): Channel id that will contain this video
  - name (String.t): Video name
  - opts (KeywordList): [optional] Optional parameters
    - :torrentfile (String.t): Torrent File
    - :target_url (String.t): HTTP target URL
    - :magnet_uri (String.t): Magnet URI
    - :thumbnailfile (String.t): Video thumbnail file
    - :previewfile (String.t): Video preview file
    - :privacy (PeerTube.Model.VideoPrivacySet.t): 
    - :category (integer()): Video category
    - :licence (integer()): Video licence
    - :language (String.t): Video language
    - :description (String.t): Video description
    - :wait_transcoding (boolean()): Whether or not we wait transcoding before publish the video
    - :support (String.t): A text tell the audience how to support the video creator
    - :nsfw (boolean()): Whether or not this video contains sensitive content
    - :tags ([String.t]): Video tags (maximum 5 tags each between 2 and 30 characters)
    - :comments_enabled (boolean()): Enable or disable comments for this video
    - :download_enabled (boolean()): Enable or disable downloading for this video
    - :schedule_update (PeerTube.Model.VideoScheduledUpdate.t): 
  ## Returns

  {:ok, PeerTube.Model.VideoUploadResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec videos_imports_post(Tesla.Env.client, integer(), String.t, keyword()) :: {:ok, nil} | {:ok, PeerTube.Model.VideoUploadResponse.t} | {:error, Tesla.Env.t}
  def videos_imports_post(connection, channel_id, name, opts \\ []) do
    optional_params = %{
      :"torrentfile" => :form,
      :"targetUrl" => :form,
      :"magnetUri" => :form,
      :"thumbnailfile" => :form,
      :"previewfile" => :form,
      :"privacy" => :form,
      :"category" => :form,
      :"licence" => :form,
      :"language" => :form,
      :"description" => :form,
      :"waitTranscoding" => :form,
      :"support" => :form,
      :"nsfw" => :form,
      :"tags" => :form,
      :"commentsEnabled" => :form,
      :"downloadEnabled" => :form,
      :"scheduleUpdate" => :form
    }
    %{}
    |> method(:post)
    |> url("/videos/imports")
    |> add_param(:form, :"channelId", channel_id)
    |> add_param(:form, :"name", name)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PeerTube.Model.VideoUploadResponse{}},
      { 400, false},
      { 403, false},
      { 409, false}
    ])
  end

  @doc """
  List available video languages

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%String{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec videos_languages_get(Tesla.Env.client, keyword()) :: {:ok, list(String.t)} | {:error, Tesla.Env.t}
  def videos_languages_get(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/videos/languages")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, []}
    ])
  end

  @doc """
  List available video licences

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%String{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec videos_licences_get(Tesla.Env.client, keyword()) :: {:ok, list(String.t)} | {:error, Tesla.Env.t}
  def videos_licences_get(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/videos/licences")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, []}
    ])
  end

  @doc """
  Get a live information

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - id (OneOfintegerUuid): The object id or uuid
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, PeerTube.Model.LiveVideoResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec videos_live_id_get(Tesla.Env.client, PeerTube.Model.OneOfintegerUuid.t, keyword()) :: {:ok, PeerTube.Model.LiveVideoResponse.t} | {:error, Tesla.Env.t}
  def videos_live_id_get(connection, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/videos/live/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PeerTube.Model.LiveVideoResponse{}}
    ])
  end

  @doc """
  Update a live information

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - id (OneOfintegerUuid): The object id or uuid
  - opts (KeywordList): [optional] Optional parameters
    - :body (LiveVideoUpdate): 
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec videos_live_id_put(Tesla.Env.client, PeerTube.Model.OneOfintegerUuid.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def videos_live_id_put(connection, id, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:put)
    |> url("/videos/live/#{id}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false},
      { 400, false},
      { 403, false}
    ])
  end

  @doc """
  Create a live

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - channel_id (integer()): Channel id that will contain this live video
  - name (String.t): Live video/replay name
  - opts (KeywordList): [optional] Optional parameters
    - :save_replay (boolean()): 
    - :permanent_live (boolean()): User can stream multiple times in a permanent live
    - :thumbnailfile (String.t): Live video/replay thumbnail file
    - :previewfile (String.t): Live video/replay preview file
    - :privacy (PeerTube.Model.VideoPrivacySet.t): 
    - :category (String.t): Live video/replay category
    - :licence (String.t): Live video/replay licence
    - :language (String.t): Live video/replay language
    - :description (String.t): Live video/replay description
    - :support (String.t): A text tell the audience how to support the creator
    - :nsfw (boolean()): Whether or not this live video/replay contains sensitive content
    - :tags ([String.t]): Live video/replay tags (maximum 5 tags each between 2 and 30 characters)
    - :comments_enabled (boolean()): Enable or disable comments for this live video/replay
    - :download_enabled (boolean()): Enable or disable downloading for the replay of this live
  ## Returns

  {:ok, PeerTube.Model.VideoUploadResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec videos_live_post(Tesla.Env.client, integer(), String.t, keyword()) :: {:ok, nil} | {:ok, PeerTube.Model.VideoUploadResponse.t} | {:error, Tesla.Env.t}
  def videos_live_post(connection, channel_id, name, opts \\ []) do
    optional_params = %{
      :"saveReplay" => :form,
      :"permanentLive" => :form,
      :"thumbnailfile" => :form,
      :"previewfile" => :form,
      :"privacy" => :form,
      :"category" => :form,
      :"licence" => :form,
      :"language" => :form,
      :"description" => :form,
      :"support" => :form,
      :"nsfw" => :form,
      :"tags" => :form,
      :"commentsEnabled" => :form,
      :"downloadEnabled" => :form
    }
    %{}
    |> method(:post)
    |> url("/videos/live")
    |> add_param(:form, :"channelId", channel_id)
    |> add_param(:form, :"name", name)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PeerTube.Model.VideoUploadResponse{}},
      { 403, false}
    ])
  end

  @doc """
  List available video privacies

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%String{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec videos_privacies_get(Tesla.Env.client, keyword()) :: {:ok, list(String.t)} | {:error, Tesla.Env.t}
  def videos_privacies_get(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/videos/privacies")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, []}
    ])
  end

  @doc """
  Upload a video

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - videofile (String.t): Video file
  - channel_id (integer()): Channel id that will contain this video
  - name (String.t): Video name
  - opts (KeywordList): [optional] Optional parameters
    - :thumbnailfile (String.t): Video thumbnail file
    - :previewfile (String.t): Video preview file
    - :privacy (PeerTube.Model.VideoPrivacySet.t): 
    - :category (integer()): Video category
    - :licence (integer()): Video licence
    - :language (String.t): Video language
    - :description (String.t): Video description
    - :wait_transcoding (boolean()): Whether or not we wait transcoding before publish the video
    - :support (String.t): A text tell the audience how to support the video creator
    - :nsfw (boolean()): Whether or not this video contains sensitive content
    - :tags ([String.t]): Video tags (maximum 5 tags each between 2 and 30 characters)
    - :comments_enabled (boolean()): Enable or disable comments for this video
    - :download_enabled (boolean()): Enable or disable downloading for this video
    - :originally_published_at (DateTime.t): Date when the content was originally published
    - :schedule_update (PeerTube.Model.VideoScheduledUpdate.t): 
  ## Returns

  {:ok, PeerTube.Model.VideoUploadResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec videos_upload_post(Tesla.Env.client, String.t, integer(), String.t, keyword()) :: {:ok, nil} | {:ok, PeerTube.Model.VideoUploadResponse.t} | {:error, Tesla.Env.t}
  def videos_upload_post(connection, videofile, channel_id, name, opts \\ []) do
    optional_params = %{
      :"thumbnailfile" => :form,
      :"previewfile" => :form,
      :"privacy" => :form,
      :"category" => :form,
      :"licence" => :form,
      :"language" => :form,
      :"description" => :form,
      :"waitTranscoding" => :form,
      :"support" => :form,
      :"nsfw" => :form,
      :"tags" => :form,
      :"commentsEnabled" => :form,
      :"downloadEnabled" => :form,
      :"originallyPublishedAt" => :form,
      :"scheduleUpdate" => :form
    }
    %{}
    |> method(:post)
    |> url("/videos/upload")
    |> add_param(:file, :"videofile", videofile)
    |> add_param(:form, :"channelId", channel_id)
    |> add_param(:form, :"name", name)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PeerTube.Model.VideoUploadResponse{}},
      { 400, false},
      { 403, false},
      { 408, false},
      { 413, false},
      { 415, false},
      { 422, false}
    ])
  end
end
