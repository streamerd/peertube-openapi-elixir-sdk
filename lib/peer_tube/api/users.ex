# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule PeerTube.Api.Users do
  @moduledoc """
  API calls for all endpoints tagged `Users`.
  """

  alias PeerTube.Connection
  import PeerTube.RequestBuilder


  @doc """
  Delete a user

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - id (integer()): The user id
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec del_user_id(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def del_user_id(connection, id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/users/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false}
    ])
  end

  @doc """
  Get a user

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - id (integer()): The user id
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, PeerTube.Model.User.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec get_user_id(Tesla.Env.client, integer(), keyword()) :: {:ok, PeerTube.Model.User.t} | {:error, Tesla.Env.t}
  def get_user_id(connection, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/users/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PeerTube.Model.User{}}
    ])
  end

  @doc """
  Update a user

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - id (integer()): The user id
  - update_user (UpdateUser):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec put_user_id(Tesla.Env.client, integer(), PeerTube.Model.UpdateUser.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def put_user_id(connection, id, update_user, _opts \\ []) do
    %{}
    |> method(:put)
    |> url("/users/#{id}")
    |> add_param(:body, :body, update_user)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false}
    ])
  end

  @doc """
  List users

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :search (String.t): Plain text search that will match with user usernames or emails
    - :blocked (boolean()): Filter results down to (un)banned users
    - :start (integer()): Offset used to paginate results
    - :count (integer()): Number of items to return
    - :sort (String.t): Sort users by criteria
  ## Returns

  {:ok, [%User{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec users_get(Tesla.Env.client, keyword()) :: {:ok, list(PeerTube.Model.User.t)} | {:error, Tesla.Env.t}
  def users_get(connection, opts \\ []) do
    optional_params = %{
      :"search" => :query,
      :"blocked" => :query,
      :"start" => :query,
      :"count" => :query,
      :"sort" => :query
    }
    %{}
    |> method(:get)
    |> url("/users")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, [%PeerTube.Model.User{}]}
    ])
  end

  @doc """
  Create a user

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - add_user (AddUser): User to create
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, PeerTube.Model.AddUserResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec users_post(Tesla.Env.client, PeerTube.Model.AddUser.t, keyword()) :: {:ok, nil} | {:ok, PeerTube.Model.AddUserResponse.t} | {:error, Tesla.Env.t}
  def users_post(connection, add_user, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/users")
    |> add_param(:body, :body, add_user)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PeerTube.Model.AddUserResponse{}},
      { 403, false}
    ])
  end

  @doc """
  Register a user

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - register_user (RegisterUser):
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec users_register_post(Tesla.Env.client, PeerTube.Model.RegisterUser.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def users_register_post(connection, register_user, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/users/register")
    |> add_param(:body, :body, register_user)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false}
    ])
  end
end
