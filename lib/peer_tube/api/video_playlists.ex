# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule PeerTube.Api.VideoPlaylists do
  @moduledoc """
  API calls for all endpoints tagged `VideoPlaylists`.
  """

  alias PeerTube.Connection
  import PeerTube.RequestBuilder


  @doc """
  Check video exists in my playlists

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - video_ids ([integer()]): The video ids to check
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, PeerTube.Model.InlineResponse2009.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec users_me_video_playlists_videos_exist_get(Tesla.Env.client, list(Integer.t), keyword()) :: {:ok, PeerTube.Model.InlineResponse2009.t} | {:error, Tesla.Env.t}
  def users_me_video_playlists_videos_exist_get(connection, video_ids, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/users/me/video-playlists/videos-exist")
    |> add_param(:query, :"videoIds", video_ids)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PeerTube.Model.InlineResponse2009{}}
    ])
  end

  @doc """
  List video playlists

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :start (integer()): Offset used to paginate results
    - :count (integer()): Number of items to return
    - :sort (String.t): Sort column
  ## Returns

  {:ok, PeerTube.Model.InlineResponse2006.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec video_playlists_get(Tesla.Env.client, keyword()) :: {:ok, PeerTube.Model.InlineResponse2006.t} | {:error, Tesla.Env.t}
  def video_playlists_get(connection, opts \\ []) do
    optional_params = %{
      :"start" => :query,
      :"count" => :query,
      :"sort" => :query
    }
    %{}
    |> method(:get)
    |> url("/video-playlists")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PeerTube.Model.InlineResponse2006{}}
    ])
  end

  @doc """
  Delete a video playlist

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - id (OneOfintegerUuid): The object id or uuid
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec video_playlists_id_delete(Tesla.Env.client, PeerTube.Model.OneOfintegerUuid.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def video_playlists_id_delete(connection, id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/video-playlists/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false}
    ])
  end

  @doc """
  Get a video playlist

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - id (OneOfintegerUuid): The object id or uuid
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, PeerTube.Model.VideoPlaylist.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec video_playlists_id_get(Tesla.Env.client, PeerTube.Model.OneOfintegerUuid.t, keyword()) :: {:ok, PeerTube.Model.VideoPlaylist.t} | {:error, Tesla.Env.t}
  def video_playlists_id_get(connection, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/video-playlists/#{id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PeerTube.Model.VideoPlaylist{}}
    ])
  end

  @doc """
  Update a video playlist
  If the video playlist is set as public, the playlist must have a assigned channel.

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - id (OneOfintegerUuid): The object id or uuid
  - opts (KeywordList): [optional] Optional parameters
    - :display_name (String.t): Video playlist display name
    - :thumbnailfile (String.t): Video playlist thumbnail file
    - :privacy (PeerTube.Model.VideoPlaylistPrivacySet.t): 
    - :description (String.t): Video playlist description
    - :video_channel_id (integer()): Video channel in which the playlist will be published
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec video_playlists_id_put(Tesla.Env.client, PeerTube.Model.OneOfintegerUuid.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def video_playlists_id_put(connection, id, opts \\ []) do
    optional_params = %{
      :"displayName" => :form,
      :"thumbnailfile" => :form,
      :"privacy" => :form,
      :"description" => :form,
      :"videoChannelId" => :form
    }
    %{}
    |> method(:put)
    |> url("/video-playlists/#{id}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false}
    ])
  end

  @doc """
  List videos of a playlist

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - id (OneOfintegerUuid): The object id or uuid
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, PeerTube.Model.VideoListResponse.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec video_playlists_id_videos_get(Tesla.Env.client, PeerTube.Model.OneOfintegerUuid.t, keyword()) :: {:ok, PeerTube.Model.VideoListResponse.t} | {:error, Tesla.Env.t}
  def video_playlists_id_videos_get(connection, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/video-playlists/#{id}/videos")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PeerTube.Model.VideoListResponse{}}
    ])
  end

  @doc """
  Delete an element from a playlist

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - id (OneOfintegerUuid): The object id or uuid
  - playlist_element_id (integer()): Playlist element id
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec video_playlists_id_videos_playlist_element_id_delete(Tesla.Env.client, PeerTube.Model.OneOfintegerUuid.t, integer(), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def video_playlists_id_videos_playlist_element_id_delete(connection, id, playlist_element_id, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/video-playlists/#{id}/videos/#{playlist_element_id}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false}
    ])
  end

  @doc """
  Update a playlist element

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - id (OneOfintegerUuid): The object id or uuid
  - playlist_element_id (integer()): Playlist element id
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject21): 
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec video_playlists_id_videos_playlist_element_id_put(Tesla.Env.client, PeerTube.Model.OneOfintegerUuid.t, integer(), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def video_playlists_id_videos_playlist_element_id_put(connection, id, playlist_element_id, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:put)
    |> url("/video-playlists/#{id}/videos/#{playlist_element_id}")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false}
    ])
  end

  @doc """
  Add a video in a playlist

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - id (OneOfintegerUuid): The object id or uuid
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject19): 
  ## Returns

  {:ok, PeerTube.Model.InlineResponse2008.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec video_playlists_id_videos_post(Tesla.Env.client, PeerTube.Model.OneOfintegerUuid.t, keyword()) :: {:ok, PeerTube.Model.InlineResponse2008.t} | {:error, Tesla.Env.t}
  def video_playlists_id_videos_post(connection, id, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/video-playlists/#{id}/videos")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PeerTube.Model.InlineResponse2008{}}
    ])
  end

  @doc """
  Reorder a playlist

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - id (OneOfintegerUuid): The object id or uuid
  - opts (KeywordList): [optional] Optional parameters
    - :body (InlineObject20): 
  ## Returns

  {:ok, nil} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec video_playlists_id_videos_reorder_post(Tesla.Env.client, PeerTube.Model.OneOfintegerUuid.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def video_playlists_id_videos_reorder_post(connection, id, opts \\ []) do
    optional_params = %{
      :body => :body
    }
    %{}
    |> method(:post)
    |> url("/video-playlists/#{id}/videos/reorder")
    |> add_optional_params(optional_params, opts)
    |> ensure_body()
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 204, false}
    ])
  end

  @doc """
  Create a video playlist
  If the video playlist is set as public, the videoChannelId is mandatory.

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - display_name (String.t): Video playlist display name
  - opts (KeywordList): [optional] Optional parameters
    - :thumbnailfile (String.t): Video playlist thumbnail file
    - :privacy (PeerTube.Model.VideoPlaylistPrivacySet.t): 
    - :description (String.t): Video playlist description
    - :video_channel_id (integer()): Video channel in which the playlist will be published
  ## Returns

  {:ok, PeerTube.Model.InlineResponse2007.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec video_playlists_post(Tesla.Env.client, String.t, keyword()) :: {:ok, PeerTube.Model.InlineResponse2007.t} | {:error, Tesla.Env.t}
  def video_playlists_post(connection, display_name, opts \\ []) do
    optional_params = %{
      :"thumbnailfile" => :form,
      :"privacy" => :form,
      :"description" => :form,
      :"videoChannelId" => :form
    }
    %{}
    |> method(:post)
    |> url("/video-playlists")
    |> add_param(:form, :"displayName", display_name)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %PeerTube.Model.InlineResponse2007{}}
    ])
  end

  @doc """
  List available playlist privacies

  ## Parameters

  - connection (PeerTube.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%String{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec video_playlists_privacies_get(Tesla.Env.client, keyword()) :: {:ok, list(String.t)} | {:error, Tesla.Env.t}
  def video_playlists_privacies_get(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/video-playlists/privacies")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, []}
    ])
  end
end
